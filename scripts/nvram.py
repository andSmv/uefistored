#!/usr/bin/env python3

import base64
import codecs
import struct
import pprint

from collections import namedtuple

base64_string = """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\
AAA=="""

DATA_LEN_FORMAT = 'Q'
DATA_LEN_SZ = struct.calcsize(DATA_LEN_FORMAT)
NAME_FORMAT = 'Q'
NAME_LEN_SZ = struct.calcsize(NAME_FORMAT)
MAGIC_FORMAT = 'I'
MAGIC_SZ = struct.calcsize(MAGIC_FORMAT)
VERSION_FORMAT = 'I'
VERSION_SZ = struct.calcsize(VERSION_FORMAT)
VAR_COUNT_FORMAT = 'Q'
VAR_COUNT_SZ = struct.calcsize(VAR_COUNT_FORMAT)
PAYLOAD_FORMAT = 'Q'
PAYLOAD_LEN_SZ = struct.calcsize(PAYLOAD_FORMAT)

MESSAGE_HEADER = 'IIQQ'

ATTR_FORMAT = 'I'
ATTR_SZ = struct.calcsize(ATTR_FORMAT)
GUID_FORMAT = '16s'
GUID_SZ = struct.calcsize('16s')

def string(d):
	s = 'STRING >>>>>>>>>>>>>>\n'

	for i, num in enumerate(d):
		if i % 16 == 0:
			s += '\n'

		if ord('0') < num < ord('z'):
			s += chr(num) + ' '
		else:
			s += hex(num) + ' '

	return s + '\nSTRING <<<<<<<<<<<<<<<<'


Variable = namedtuple('Variable', 'name, data, attrs, guid')


def parse(blob):
	name_len = struct.unpack(NAME_FORMAT, blob[:NAME_LEN_SZ])[0]
	blob = blob[NAME_LEN_SZ:]

	name = blob[:name_len]
	blob = blob[name_len:]

	data_len = struct.unpack(DATA_LEN_FORMAT, blob[:DATA_LEN_SZ])[0]
	blob = blob[DATA_LEN_SZ:]

	data = blob[:data_len]
	blob = blob[data_len:]

	guid = [hex(num) for num in blob[:GUID_SZ]]
	blob = blob[GUID_SZ:]

	attrs = struct.unpack(ATTR_FORMAT, blob[:ATTR_SZ])[0]
	blob = blob[ATTR_SZ:]

	blob = blob[16*3:]

	return blob, Variable(name=codecs.decode(name, encoding='utf16'),
			      data=data, attrs=attrs, guid=guid)

serialized = base64.b64decode(base64_string)

with open('raw.dat', 'wb') as f:
	f.write(serialized)

total_size = len(serialized)

magic, version, var_count, payload_size = struct.unpack(MESSAGE_HEADER,
	serialized[:struct.calcsize(MESSAGE_HEADER)])
serialized = serialized[struct.calcsize(MESSAGE_HEADER):]

print("MAGIC:", hex(magic))
print("VERSION:", version)
print("VAR_COUNT:", var_count)
print("PAYLOAD SZ:", payload_size)

header_sz = total_size - payload_size
expected_header_sz = MAGIC_SZ + VERSION_SZ + VAR_COUNT_SZ + PAYLOAD_LEN_SZ

print('header_sz=', header_sz);
print('expected_header_sz=', expected_header_sz);

variables = []
while serialized:
	serialized, variable = parse(serialized)
	variables.append(variable)

pprint.pprint(variables)

print("LEN:", len(variables))
